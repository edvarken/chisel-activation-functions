package silu
import chisel3._
import chisel3.util._

class siluLUT(val intBits: Int = 2, val fracBits: Int = 4) extends Module {
  val io = IO(new Bundle {
    val indexIn = Input(UInt((intBits + fracBits + 1).W))  // 7-bit index for intBits=2 and fracBits=4, so 2^7 = 2*2^(intBits + fracBits) (to represent silu between -4 and +4 in 128 entries)
    // For intBits=3 and fracBits=4, the indexIn is 8 bits wide, so 2^8 = 2*2^(intBits + fracBits) (to represent silu between -8 and +8 in 256 entries)
    val valueOut = Output(UInt(16.W)) // BF16 output
  })
  val lut = if (intBits == 2 && fracBits == 4) { // Use Scala-level if/else to select which LUT to generate @ elaboration time, don't use Chisel-level when/otherwise (that is @runtime!)
    VecInit(Seq(  // indices 0 to 127, for x-values between -4 and +4, step size 0.0625
      "b0000000000000000".U, // 0000000
      "b0011110100000011".U, // 0000001
      "b0011110110000111".U, // 0000010
      "b0011110111010001".U, // 0000011
      "b0011111000001111".U, // ...
      "b0011111000111000".U,
      "b0011111001100011".U,
      "b0011111010001000".U, // index 7: x-value: 0.4375; silu-value 0.265625
      "b0011111010011111".U,
      "b0011111010110111".U,
      "b0011111011010000".U,
      "b0011111011101010".U,
      "b0011111100000010".U,
      "b0011111100010000".U,
      "b0011111100011110".U,
      "b0011111100101100".U,
      "b0011111100111011".U,
      "b0011111101001010".U,
      "b0011111101011001".U,
      "b0011111101101000".U,
      "b0011111101111000".U,
      "b0011111110000100".U,
      "b0011111110001100".U,
      "b0011111110010100".U,
      "b0011111110011100".U,
      "b0011111110100101".U,
      "b0011111110101101".U,
      "b0011111110110110".U,
      "b0011111110111110".U,
      "b0011111111000111".U,
      "b0011111111010000".U,
      "b0011111111011000".U,
      "b0011111111100001".U,
      "b0011111111101010".U,
      "b0011111111110010".U,
      "b0011111111111011".U,
      "b0100000000000010".U,
      "b0100000000000110".U,
      "b0100000000001011".U,
      "b0100000000001111".U,
      "b0100000000010011".U,
      "b0100000000011000".U,
      "b0100000000011100".U,
      "b0100000000100001".U,
      "b0100000000100101".U,
      "b0100000000101001".U,
      "b0100000000101110".U,
      "b0100000000110010".U,
      "b0100000000110110".U,
      "b0100000000111011".U,
      "b0100000000111111".U,
      "b0100000001000011".U,
      "b0100000001001000".U,
      "b0100000001001100".U,
      "b0100000001010000".U,
      "b0100000001010101".U,
      "b0100000001011001".U,
      "b0100000001011101".U,
      "b0100000001100001".U,
      "b0100000001100110".U,
      "b0100000001101010".U,
      "b0100000001101110".U,
      "b0100000001110010".U,
      "b0100000001110111".U, // index 63: 0111111 (this is x-value: +3.9375)
      "b0000000000000000".U, // index 64: 1000000 (this is x-value: -0)
      "b1011110011111000".U, // index 65: 1000001 (this is x-value: -0.0625)
      "b1011110101110000".U,
      "b1011110110101110".U,
      "b1011110111100000".U,
      "b1011111000000111".U,
      "b1011111000011100".U,
      "b1011111000101111".U,
      "b1011111001000001".U,
      "b1011111001010001".U,
      "b1011111001011111".U,
      "b1011111001101011".U, // index 75: 1001011 (this is x-value: -0.6875) output silu-value: -0.22949219
      "b1011111001110110".U,
      "b1011111001111111".U, // index 77: 1001101 (this is x-value: -0.8125) output silu-value: -0.2490234375)
      "b1011111010000011".U,
      "b1011111010000111".U,
      "b1011111010001001".U,
      "b1011111010001011".U,
      "b1011111010001101".U,
      "b1011111010001110".U,
      "b1011111010001110".U,
      "b1011111010001110".U,
      "b1011111010001110".U,
      "b1011111010001101".U,
      "b1011111010001100".U,
      "b1011111010001010".U,
      "b1011111010001000".U,
      "b1011111010000110".U,
      "b1011111010000100".U,
      "b1011111010000010".U,
      "b1011111001111111".U,
      "b1011111001111001".U,
      "b1011111001110100".U,
      "b1011111001101110".U,
      "b1011111001101000".U,
      "b1011111001100001".U,
      "b1011111001011011".U,
      "b1011111001010101".U,
      "b1011111001001110".U,
      "b1011111001001000".U,
      "b1011111001000010".U,
      "b1011111000111011".U,
      "b1011111000110101".U,
      "b1011111000101111".U,
      "b1011111000101001".U,
      "b1011111000100011".U,
      "b1011111000011101".U,
      "b1011111000010111".U,
      "b1011111000010001".U,
      "b1011111000001100".U,
      "b1011111000000110".U,
      "b1011111000000001".U,
      "b1011110111111000".U,
      "b1011110111101110".U,
      "b1011110111100100".U,
      "b1011110111011011".U,
      "b1011110111010010".U,
      "b1011110111001001".U,
      "b1011110111000000".U,
      "b1011110110111000".U,
      "b1011110110110000".U,
      "b1011110110101000".U,
      "b1011110110100001".U,
      "b1011110110011010".U // index 127: 1111111 (this is -3.9375)
    ))

  } else if (intBits == 3 && fracBits == 4) {
    VecInit(Seq(  // indices 0 to 255, for x-values between -8 and +8, step size 0.0625
      "b0000000000000000".U,
      "b0011110100000011".U,
      "b0011110110000111".U,
      "b0011110111010001".U,
      "b0011111000001111".U,
      "b0011111000111000".U,
      "b0011111001100011".U,
      "b0011111010001000".U,
      "b0011111010011111".U,
      "b0011111010110111".U,
      "b0011111011010000".U,
      "b0011111011101010".U,
      "b0011111100000010".U,
      "b0011111100010000".U,
      "b0011111100011110".U,
      "b0011111100101100".U,
      "b0011111100111011".U,
      "b0011111101001010".U,
      "b0011111101011001".U,
      "b0011111101101000".U,
      "b0011111101111000".U,
      "b0011111110000100".U,
      "b0011111110001100".U,
      "b0011111110010100".U,
      "b0011111110011100".U,
      "b0011111110100101".U,
      "b0011111110101101".U,
      "b0011111110110110".U,
      "b0011111110111110".U,
      "b0011111111000111".U,
      "b0011111111010000".U,
      "b0011111111011000".U,
      "b0011111111100001".U,
      "b0011111111101010".U,
      "b0011111111110010".U,
      "b0011111111111011".U,
      "b0100000000000010".U,
      "b0100000000000110".U,
      "b0100000000001011".U,
      "b0100000000001111".U,
      "b0100000000010011".U,
      "b0100000000011000".U,
      "b0100000000011100".U,
      "b0100000000100001".U,
      "b0100000000100101".U,
      "b0100000000101001".U,
      "b0100000000101110".U,
      "b0100000000110010".U,
      "b0100000000110110".U,
      "b0100000000111011".U,
      "b0100000000111111".U,
      "b0100000001000011".U,
      "b0100000001001000".U,
      "b0100000001001100".U,
      "b0100000001010000".U,
      "b0100000001010101".U,
      "b0100000001011001".U,
      "b0100000001011101".U,
      "b0100000001100001".U,
      "b0100000001100110".U,
      "b0100000001101010".U,
      "b0100000001101110".U,
      "b0100000001110010".U,
      "b0100000001110111".U,
      "b0100000001111011".U,
      "b0100000001111111".U,
      "b0100000010000001".U,
      "b0100000010000011".U,
      "b0100000010000110".U,
      "b0100000010001000".U,
      "b0100000010001010".U,
      "b0100000010001100".U,
      "b0100000010001110".U,
      "b0100000010010000".U,
      "b0100000010010010".U,
      "b0100000010010100".U,
      "b0100000010010110".U,
      "b0100000010011000".U,
      "b0100000010011010".U,
      "b0100000010011100".U,
      "b0100000010011110".U,
      "b0100000010100000".U,
      "b0100000010100011".U,
      "b0100000010100101".U,
      "b0100000010100111".U,
      "b0100000010101001".U,
      "b0100000010101011".U,
      "b0100000010101101".U,
      "b0100000010101111".U,
      "b0100000010110001".U,
      "b0100000010110011".U,
      "b0100000010110101".U,
      "b0100000010110111".U,
      "b0100000010111001".U,
      "b0100000010111011".U,
      "b0100000010111101".U,
      "b0100000010111111".U,
      "b0100000011000001".U,
      "b0100000011000011".U,
      "b0100000011000101".U,
      "b0100000011000111".U,
      "b0100000011001001".U,
      "b0100000011001011".U,
      "b0100000011001101".U,
      "b0100000011001111".U,
      "b0100000011010001".U,
      "b0100000011010011".U,
      "b0100000011010101".U,
      "b0100000011010111".U,
      "b0100000011011001".U,
      "b0100000011011011".U,
      "b0100000011011101".U,
      "b0100000011011111".U,
      "b0100000011100001".U,
      "b0100000011100011".U,
      "b0100000011100101".U,
      "b0100000011100111".U,
      "b0100000011101001".U,
      "b0100000011101011".U,
      "b0100000011101101".U,
      "b0100000011101111".U,
      "b0100000011110001".U,
      "b0100000011110011".U,
      "b0100000011110101".U,
      "b0100000011110111".U,
      "b0100000011111001".U,
      "b0100000011111011".U,
      "b0100000011111101".U,
      "b0000000000000000".U,
      "b1011110011111000".U,
      "b1011110101110000".U,
      "b1011110110101110".U,
      "b1011110111100000".U,
      "b1011111000000111".U,
      "b1011111000011100".U,
      "b1011111000101111".U,
      "b1011111001000001".U,
      "b1011111001010001".U,
      "b1011111001011111".U,
      "b1011111001101011".U,
      "b1011111001110110".U,
      "b1011111001111111".U,
      "b1011111010000011".U,
      "b1011111010000111".U,
      "b1011111010001001".U,
      "b1011111010001011".U,
      "b1011111010001101".U,
      "b1011111010001110".U,
      "b1011111010001110".U,
      "b1011111010001110".U,
      "b1011111010001110".U,
      "b1011111010001101".U,
      "b1011111010001100".U,
      "b1011111010001010".U,
      "b1011111010001000".U,
      "b1011111010000110".U,
      "b1011111010000100".U,
      "b1011111010000010".U,
      "b1011111001111111".U,
      "b1011111001111001".U,
      "b1011111001110100".U,
      "b1011111001101110".U,
      "b1011111001101000".U,
      "b1011111001100001".U,
      "b1011111001011011".U,
      "b1011111001010101".U,
      "b1011111001001110".U,
      "b1011111001001000".U,
      "b1011111001000010".U,
      "b1011111000111011".U,
      "b1011111000110101".U,
      "b1011111000101111".U,
      "b1011111000101001".U,
      "b1011111000100011".U,
      "b1011111000011101".U,
      "b1011111000010111".U,
      "b1011111000010001".U,
      "b1011111000001100".U,
      "b1011111000000110".U,
      "b1011111000000001".U,
      "b1011110111111000".U,
      "b1011110111101110".U,
      "b1011110111100100".U,
      "b1011110111011011".U,
      "b1011110111010010".U,
      "b1011110111001001".U,
      "b1011110111000000".U,
      "b1011110110111000".U,
      "b1011110110110000".U,
      "b1011110110101000".U,
      "b1011110110100001".U,
      "b1011110110011010".U,
      "b1011110110010011".U,
      "b1011110110001100".U,
      "b1011110110000110".U,
      "b1011110110000000".U,
      "b1011110101110100".U,
      "b1011110101101001".U,
      "b1011110101011110".U,
      "b1011110101010100".U,
      "b1011110101001010".U,
      "b1011110101000001".U,
      "b1011110100110111".U,
      "b1011110100101111".U,
      "b1011110100100110".U,
      "b1011110100011110".U,
      "b1011110100010111".U,
      "b1011110100010000".U,
      "b1011110100001001".U,
      "b1011110100000010".U,
      "b1011110011111000".U,
      "b1011110011101100".U,
      "b1011110011100000".U,
      "b1011110011010101".U,
      "b1011110011001010".U,
      "b1011110011000000".U,
      "b1011110010110111".U,
      "b1011110010101110".U,
      "b1011110010100101".U,
      "b1011110010011101".U,
      "b1011110010010101".U,
      "b1011110010001101".U,
      "b1011110010000110".U,
      "b1011110010000000".U,
      "b1011110001110011".U,
      "b1011110001100110".U,
      "b1011110001011011".U,
      "b1011110001001111".U,
      "b1011110001000101".U,
      "b1011110000111011".U,
      "b1011110000110001".U,
      "b1011110000101000".U,
      "b1011110000011111".U,
      "b1011110000010111".U,
      "b1011110000001111".U,
      "b1011110000001000".U,
      "b1011110000000001".U,
      "b1011101111110101".U,
      "b1011101111101000".U,
      "b1011101111011100".U,
      "b1011101111010000".U,
      "b1011101111000110".U,
      "b1011101110111011".U,
      "b1011101110110001".U,
      "b1011101110101000".U,
      "b1011101110011111".U,
      "b1011101110010111".U,
      "b1011101110001111".U,
      "b1011101110000111".U,
      "b1011101110000000".U,
      "b1011101101110011".U,
      "b1011101101100110".U,
      "b1011101101011010".U,
      "b1011101101001111".U,
      "b1011101101000100".U,
      "b1011101100111001".U
    ))
  } else { // Default fallback if unsupported config
    VecInit(Seq.fill(1)(0.U(16.W)))
  }
  io.valueOut := lut(io.indexIn)
}
